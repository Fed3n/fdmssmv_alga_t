Andiamo quindi ad analizzare come implementare la coda con priorità utilizzando un Heap. Le prime due funzioni, isEmpty() e min() sono facilmente implementabili: isEmpty() ritorna true se il primo elemento dell'Heap non è vuoto, false altrimenti. Min() restituisce l'elemento in prima posizione. DeleteMin() invece è più complessa. Ragionando sull'albero minHeap procediamo alla cancellazione della radice; poichè la radice può essere vuota solo se l'intera coda è vuota andiamo ad inserire al posto della radice l'ultimo elemento in coda, cioè la foglia di massimo livello più a destra. Poichè abbiamo inserito una foglia al posto della radice non siamo sicuri che la nuova radice abbia priorità minore dei figli. Per questo motivo, come ultima operazione viene chiamata la funzione minHeapRestore sulla radice che si occupa di ristabilire l'heap posizionando la nuova radice al posto giusto nell'albero.