La complessità dell'HeapSort è O(n log n), quali sono i contributi forniti dalle singole funzioni?
FHeapBuild ha complessita O(n) e maxHeapRestore ha complessità O(log n), quindi la complessità complessiva è O(n log n)
TmaxHeapRestore ha costo O(log n) e viene richiamata da un ciclo n volte, quindi la complessità finale è O(n log n)
FHeapBuild ha complessità O(n log n) e maxHeapRestore ha complessità O(log n), quindi la compessità complessiva è O(n log n).
La funzione HeapBuild viene eseguita per prima ed ha complessità O(n). Successivamente viene eseguita n volte la funzione maxHeapRestore che ha un costo di O(log n). Quindi in totale abbiamo una prima chiamata che costa O(n) ed un ciclo (che contiene maxHeapRestore) che ha costo O(n log n). La complessità finale è la massima tra le due, cioè O(n log n). Alla luce di quanto descritto, la terza risposta è errata, perchè sbaglia la complessità di HeapBuild; la prima risposta conclude un risultato corretto ma in modo errato: la somma di due complessità è il massimo tra le due, non il loro prodotto. Inoltre non considera che maxHeapRestore è all'interno di un ciclo e quindi la sua complessità è moltiplicata per n. La seconda risposta è corretta perchè sebbene non fa riferimento a HeapBuild non presenta errori riguardo ai contributi delle singole operazioni.